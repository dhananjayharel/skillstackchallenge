import { Component, Input,ViewChild } from '@angular/core';
import { Diff2HTMLService, AlertService } from '../../services';
import {Diff2Html} from 'diff2html';
import { NgbModal, ModalDismissReasons } from '@ng-bootstrap/ng-bootstrap';

@Component({
    selector: 'app-diff2html',
    templateUrl: './diff2htmlrenderer.component.html',
    styleUrls: ['./diff2htmlrenderer.component.scss']
})
export class Diff2HTMLComponent  {
    @Input() branchName: string;
    @Input() gitUrl: string;
    @Input() openInNewTab = false;
    @ViewChild('diff2HtmlModal') modal: any;

    public diffUrl: string;
    public outputHtml: string;
    public rawInput: string;
    public outputFormat = 'line-by-line';
    public loading = false;
    private closeResult: string;

    constructor(private diff2HTMLService: Diff2HTMLService,
        private alertService: AlertService,
        private modalService: NgbModal) {
        
//        this.diffUrl = 'https://api.github.com/repos/dhananjayharel/krazykodertest/compare/master...djcandidatenew';
    }


   init () {
        this.loading = true;
        if (!this.diffUrl) {
            const repoName = this.gitUrl;
            this.diffUrl = 'https://api.github.com/repos/vilashProgrammr/'
                            + repoName
                            + '/compare/master...' + this.branchName;
            console.log(this.diffUrl);
        }

        this.diff2HTMLService.fetchDiff(this.diffUrl)
        .subscribe(
            data => {
                this.rawInput = data;
                console.log(data);
                this.loading = false;
                if (!data) {
                  this.rawInput = null;
                  //  this.alertService.error('No changes found in the project code! It might be, candidate has submitted the test without doing any code changes.');  
                }
                this.drawDiff();
            },
            error => {
                this.loading = false;
                this.alertService.error('+++ Sorry, No code submission found!');
            }
        );
   }


    reload(mode) {
        // this.message = '';
        this.outputFormat = mode;
        this.drawDiff();
    }

    drawDiff() {
      let outputHtml = '';

        if (!this.rawInput) {
          // this.rawInput = "--- a/server/vendor/golang.org/x/sys/unix/zsyscall_linux_mipsle.go\n+++ b/server/vendor/golang.org/x/sys/unix/zsyscall_linux_mipsle.go\n@@ -1035,6 +1035,17 @@ func Prctl(option int, arg2 uintptr, arg3 uintptr, arg4 uintptr, arg5 uintptr) (\n \n // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n \n+func Pselect(nfd int, r *FdSet, w *FdSet, e *FdSet, timeout *Timespec, sigmask *Sigset_t) (n int, err error) {\n+\tr0, _, e1 := Syscall6(SYS_PSELECT6, uintptr(nfd), uintptr(unsafe.Pointer(r)), uintptr(unsafe.Pointer(w)), uintptr(unsafe.Pointer(e)), uintptr(unsafe.Pointer(timeout)), uintptr(unsafe.Pointer(sigmask)))\n+\tn = int(r0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n func read(fd int, p []byte) (n int, err error) {\n \tvar _p0 unsafe.Pointer\n \tif len(p) > 0 {\n";
          outputHtml = '<pre>No changes detected!</pre>';
        } else {
          outputHtml = Diff2Html.getPrettyHtml(this.rawInput,
              {
                inputFormat: 'diff',
                showFiles: true,
                matching: 'lines',
                outputFormat: this.outputFormat
              }
            );
        }

        if (this.openInNewTab) {
            this.showInNewTab(outputHtml);
        } else {
            this.outputHtml = outputHtml;
            this.openModal(this.modal);
        }
    }

    showInNewTab (outputHtml) {
        const stylesheet = '<link rel="stylesheet" type="text/css" href="https://diff2html.xyz/assets/diff2html.min.css" />'
                            + '<style class="text/stylesheet"> '
                            + ' * { font-family: -apple-system, system-ui, BlinkMacSystemFont, "Open Sans", "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;'
                            +' } '
                            +' </style> ';


        const newWindow = window.open();
        if (newWindow) {
            setTimeout(() => newWindow.document.write(stylesheet + outputHtml), 25);
        } else {
            this.alertService.error("Please allow permissions from browser to open the solution in new window.");
        }
    }

    openModal(content) {
        
        this.modalService.open(content, {size: 'lg'}).result.then((result) => {
            this.closeResult = `Closed with: ${result}`;
        }, (reason) => {
            this.closeResult = `Dismissed ${this.getDismissReason(reason)}`;
        });
    }

    private getDismissReason(reason: any): string {
        if (reason === ModalDismissReasons.ESC) {
            return 'by pressing ESC';
        } else if (reason === ModalDismissReasons.BACKDROP_CLICK) {
            return 'by clicking on a backdrop';
        } else {
            return  `with: ${reason}`;
        }
    }
}
